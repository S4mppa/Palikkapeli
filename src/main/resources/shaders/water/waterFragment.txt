#version 440 core
in vec4 vertexPos;
in float visibility;
in vec4 clipSpace;
in vec2 textureCoords;
in vec3 worldPos;
in float time_f;
in vec3 toCameraVector;
in vec3 toLightVector;

in mat4 modelViewMatrix;

out vec4 out_Colour;
uniform vec3 lightColour;
uniform bool isEyeInWater;
uniform vec3 skyColour;

uniform float waveStrength;
const float shineDamper = 500.0;
const float reflectivity = 0.6;

uniform sampler2D reflectionTexture;
uniform sampler2D refractionTexture;
uniform sampler2D dudvMap;
uniform sampler2D normalMap;
uniform sampler2D depthMap;
uniform sampler2D noiseTex;

const bool isIce = false;

const float WATER_WAVE_HEIGHT = 0.5f;




void main(void){

    vec2 ndc = (clipSpace.xy / clipSpace.w)/2.0 + 0.5;
    vec2 refractTexCoords = vec2(ndc.x,ndc.y);
    vec2 reflectTexCoords = vec2(ndc.x,1.0-ndc.y);

    float near = 0.1;
    float far = 1000.0;
    float depth = texture(depthMap, refractTexCoords).r;

    float floorDistance = 2.0 * near * far / (far + near - (2.0 * depth - 1.0) * (far - near));

    depth = gl_FragCoord.z;
    float waterDistance = 2.0 * near * far / (far + near - (2.0 * depth - 1.0) * (far - near));
    float waterDepth = floorDistance - waterDistance;

	vec2 distortedTexCoords = texture(normalMap, vec2(textureCoords.x + time_f, textureCoords.y)).rg*0.1;
	distortedTexCoords = textureCoords + vec2(distortedTexCoords.x, distortedTexCoords.y+time_f);
	vec2 totalDistortion = (texture(normalMap, distortedTexCoords).rg * 2.0 - 1.0) * 0.05  * clamp(waterDepth/20, 0, 1);
    reflectTexCoords += totalDistortion;
    refractTexCoords += totalDistortion;

    vec4 reflectColour = texture(reflectionTexture, reflectTexCoords);

    vec4 refractColour = texture(refractionTexture, refractTexCoords);

    vec4 normalMapColour = texture(normalMap, distortedTexCoords);
    vec3 normal = vec3(normalMapColour.r * 2.0 - 1.0, normalMapColour.b * 10, normalMapColour.g * 2.0 - 1.0);
    normal = normalize(normal);

    //fresnel
    vec3 viewVector = normalize(toCameraVector);
    float refractiveFactor = dot(viewVector, normal);
    refractiveFactor = pow(refractiveFactor, 1); //change reflectiveness here
    refractiveFactor = clamp(refractiveFactor, 0.0, 0.6);


    vec3 reflectedLight = reflect(normalize(toLightVector), normal);
    float specular = max(dot(reflectedLight, viewVector), 0.0);
    specular = pow(specular, shineDamper);
    vec3 specularHighlights = lightColour * specular * reflectivity;

    vec3 unitLightVector = normalize(toLightVector);

    float nDot = dot(normal, unitLightVector);
    float brightness = max(nDot, 0.4);
    vec3 diffuse = brightness * lightColour;

    float opacity = 1.0;

    if(isEyeInWater) opacity = 0.7;
    if(isEyeInWater){
        //faking the snells's window effect
        float refractiveDamp = dot(viewVector, -normal);
        refractiveDamp = pow(clamp(refractiveDamp, 0.0, 1.0), 1);
        if(refractiveDamp > 0.2){
             out_Colour = refractColour;
        }
        else{
            out_Colour = mix(vec4(0.0, 0.3, 0.5, 0.1), refractColour, refractiveDamp);
        }

    }
    else{
        out_Colour = mix(reflectColour, refractColour, refractiveFactor);
    }

    out_Colour =  mix(out_Colour, vec4(0.4,0.4,0.4, 1.0), 0.2) + vec4(specularHighlights, 0.0);

    out_Colour.a = clamp(waterDepth/2, 0.0, 1.0);
}