#version 440 core

in vec3 outTexCoord;
in float lightOffset;
in vec4 outGrassColor;
in float distance;
in vec3 outWorldPos;
in vec3 normal;

out vec4 out_Colour;

uniform sampler2DArray texture_sampler;
uniform vec3 lightColour;
uniform vec3 skyColour;
uniform vec3 cameraPos;
uniform float worldTime;
uniform vec3 sunDir;

float a = 0.001;
float b = 0.05;

vec3 applyFog( in vec3  rgb,      // original color of the pixel
               in float distance, // camera to point distance
               in vec3  rayOri,   // camera position
               in vec3  rayDir )  // camera to point vector
{
    float fogAmount = (a/b) * exp(-rayOri.y*b) * (1.0-exp( -distance*rayDir.y*b ))/rayDir.y;
    vec3  fogColor  = vec3(0.5,0.6,0.7);
    return mix( rgb, fogColor, fogAmount );
}

vec3 applyFog2( in vec3  rgb,      // original color of the pixel
               in float distance, // camera to point distance
               in vec3  rayDir,   // camera to point vector
               in vec3  sunDir )  // sun light direction
{
    float fogAmount = 1.0 - exp( -distance*b );
    float sunAmount = max( dot( rayDir, sunDir ), 0.0 );
    vec3  fogColor  = mix( vec3(0.5,0.6,0.7), // bluish
                           vec3(1.0,0.9,0.7), // yellowish
                           pow(sunAmount,8.0));
    return mix( rgb, fogColor, fogAmount );
}

void main(void){
    float opacity = 1.0;
    vec4 textureColour = texture(texture_sampler, outTexCoord);
    if(textureColour.a < 0.6){
        discard;
    }
    float texLayer = round(outTexCoord.b);
    out_Colour = textureColour * lightOffset;
    //out_Colour = mix(vec4(skyColour, 1.0), out_Colour, 1);
    vec3 rayDir = normalize(outWorldPos - cameraPos);
    if(texLayer == 1 || texLayer == 18){ //grass face indexes
        out_Colour *= outGrassColor;
    }
    //float darkness = dot(normal, sunDir);
    //darkness = max(darkness,0.3);
    //out_Colour *= darkness;
    out_Colour *= max(worldTime, 0.3);

    //out_Colour.xyz = applyFog2(out_Colour.xyz, distance, rayDir, sunDir);

}